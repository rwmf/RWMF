[
    {
        "user": {
            "id": 543633,
            "login": "mohsen1"
        },
        "id": 224212686,
        "created_at": "2017-04-25T17:23:26Z",
        "title": "Error TS2346 when importing React components written in JavaScript ",
        "body": "<!-- BUGS: Please use this template. -->\r\n<!-- QUESTIONS: This is not a general support forum! Ask Qs at http://stackoverflow.com/questions/tagged/typescript -->\r\n<!-- SUGGESTIONS: See https://github.com/Microsoft/TypeScript-wiki/blob/master/Writing-Good-Design-Proposals.md -->\r\n\r\n**TypeScript Version:**  2.3.0\r\n\r\n**Code**\r\nSee repo here: https://github.com/mohsen1/ts23-super-issue\r\n\r\n```js\r\nimport React from 'react';\r\n\r\nexport default class Component extends React.Component {\r\n    constructor(...args) {\r\n        super(...args)\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nNo error\r\n\r\n**Actual behavior:**\r\n\r\n```\r\nError: src/component.js(5,9): error TS2346: Supplied parameters do not match any signature of call target.\r\n```\r\n\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 972891,
            "login": "DanielRosenwasser"
        },
        "id": 752979540,
        "created_at": "2020-11-29T18:43:19Z",
        "title": "Object completions broken when leading space is present",
        "body": "```ts\r\ndeclare function foo(x: { abc: string, def: number });\r\n\r\nfoo({ /**/})\r\n```\r\n\r\nand\r\n\r\n```ts\r\ndeclare function foo(x: { abc: string, def: number });\r\n\r\nfoo({ abc: \"hi\", /**/})\r\n```\r\n\r\n**Expected**: completions\r\n**Actual**: **no completions**",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 1491201,
            "login": "sheldonkwok"
        },
        "id": 568670162,
        "created_at": "2020-02-21T00:52:23Z",
        "title": "npm EINTEGRITY 3.7.5",
        "body": "**TypeScript Version:**  3.7.5\r\n\r\n<!-- Search terms you tried before logging this (so others can find this issue more easily) -->\r\n**Search Terms:** integrity checksum failed\r\n\r\n**Code**\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n**Expected behavior:**\r\nTypescript is installed\r\n\r\n**Actual behavior:**\r\n\r\n```\r\nnpm ERR! code EINTEGRITY\r\n\r\nnpm ERR! Verification failed while extracting typescript@3.7.5:\r\n\r\nnpm ERR! Verification failed while extracting typescript@3.7.5:\r\n\r\nnpm ERR! sha512-/P5lkRXkWHNAbcJIiHPfRoKqyd7bsyCma1hZNUGfn20qm64T6ZBlrzprymeu918H+mB/0rIg2gGK/BXkhhYgBw== integrity checksum failed when using sha512: wanted sha512-/P5lkRXkWHNAbcJIiHPfRoKqyd7bsyCma1hZNUGfn20qm64T6ZBlrzprymeu918H+mB/0rIg2gGK/BXkhhYgBw== but got sha512-9Ywwy5yYAF78j3Q3U3HFmxRDJ0GO/40NjE51SEWwl8i6l7XfwnxRpvW4trJThUWfEfP9YuPxu2X+M3HuG6rKAA==. (4086425 bytes)\r\n```\r\n\r\nOn https://www.npmjs.com/package/typescript/v/3.7.5, it looks like the original publish is one month ago. I could update the sha in the package-lock.json but I just wanted to make sure it wasn't maliciously published since the tags are generally immutable. ",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 48897392,
            "login": "inokawa"
        },
        "id": 752940119,
        "created_at": "2020-11-29T15:24:07Z",
        "title": "Fix typos",
        "body": "<!--\r\nThank you for submitting a pull request!\r\n\r\nPlease verify that:\r\n* [ ] There is an associated issue in the `Backlog` milestone (**required**)\r\n* [ ] Code is up-to-date with the `master` branch\r\n* [ ] You've successfully run `gulp runtests` locally\r\n* [ ] There are new or updated unit tests validating the change\r\n\r\nRefer to CONTRIBUTING.MD for more details.\r\n  https://github.com/Microsoft/TypeScript/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nFix some typos in comments.\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 48897392,
            "login": "inokawa"
        },
        "id": 752940119,
        "created_at": "2020-11-29T15:24:07Z",
        "title": "Fix typos",
        "body": "<!--\r\nThank you for submitting a pull request!\r\n\r\nPlease verify that:\r\n* [ ] There is an associated issue in the `Backlog` milestone (**required**)\r\n* [ ] Code is up-to-date with the `master` branch\r\n* [ ] You've successfully run `gulp runtests` locally\r\n* [ ] There are new or updated unit tests validating the change\r\n\r\nRefer to CONTRIBUTING.MD for more details.\r\n  https://github.com/Microsoft/TypeScript/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nFix some typos in comments.\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 30944236,
            "login": "TheMrZZ"
        },
        "id": 748669805,
        "created_at": "2020-11-23T10:22:04Z",
        "title": "Incorrect inference/autocompletion on generic arrays, when values can be inferred from a defined object.",
        "body": "**TypeScript Version:**  4.1.2\r\n\r\n**Search Terms:**\r\nAutocompletion, incorrect, values, inference, generic, array, object, keys\r\n\r\n**Summary:**\r\nWhen an interface/a type has an object with generic keys, and an array of those keys, the array values cannot be infered from the object keys.\r\n\r\n**Code**\r\n\r\n```ts\r\ninterface Recipe<INGREDIENTS extends string> {\r\n  quantities: Record<INGREDIENTS, number>\r\n  allergens?: INGREDIENTS[]\r\n}\r\n\r\nfunction createRecipe<INGREDIENTS extends string>(recipe: Recipe<INGREDIENTS>) {}\r\n\r\ncreateRecipe({\r\n  quantities: {\r\n    eggs: 1,\r\n    flour: 2,\r\n  },\r\n  allergens: ['']\r\n})\r\n```\r\n\r\n**Expected behavior:**\r\nHere, when trying to give a value to `allergens`, the autocompletion should show `\"eggs\" | \"flour\"`.\r\n\r\n**Actual behavior:**\r\nThe autocompletion doesn't find anything.\r\n![image](https://user-images.githubusercontent.com/30944236/99950809-6bf03b80-2d7d-11eb-82c4-7636fda728a0.png)\r\n\r\n**Notes:**\r\nThe other way is working: you can fill the array first, then the object keys will autocomplete - but this rarely make sense to write things that way.\r\n\r\n**Failed workarounds:**\r\nThis bug is still present, even when:\r\n- `allergens` is optionnal\r\n- We switch from an interface to a type\r\n- We use `keyof this['quantities']` instead of `INGREDIENTS[]`",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 415450,
            "login": "iislucas"
        },
        "id": 38467435,
        "created_at": "2014-07-22T23:52:21Z",
        "title": "Support some non-structural (nominal) type matching",
        "body": "Proposal: support non-structural typing (e.g. new user-defined base-types, or some form of basic nominal typing). This allows programmer to have more refined types supporting frequently used idioms such as: \r\n\r\n1) Indexes that come from different tables. Because all indexes are strings (or numbers), it's easy to use the an index variable (intended for one table) with another index variable intended for a different table. Because indexes are the same type, no error is given. If we have abstract index classes this would be fixed.\r\n\r\n2) Certain classes of functions (e.g. callbacks) can be important to be distinguished even though they have the same type. e.g. \"() => void\" often captures a side-effect producing function. Sometimes you want to control which ones are put into an event handler. Currently there's no way to type-check them. \r\n\r\n3) Consider having 2 different interfaces that have different optional parameters but the same required one. In typescript you will not get a compiler error when you provide one but need the other. Sometimes this is ok, but very often this is very not ok and you would love to have a compiler error rather than be confused at run-time.\r\n\r\nProposal (with all type-Error-lines removed!): \r\n\r\n```\r\n// Define FooTable and FooIndex\r\nnominal FooIndex = string;  // Proposed new kind of nominal declaration.\r\ninterface FooTable {\r\n  [i: FooIndex]: { foo: number };\r\n}\r\nlet s1: FooIndex;\r\nlet t1: FooTable;\r\n\r\n// Define BarTable and BarIndex\r\nnominal BarIndex = string; // Proposed new kind of nominal declaration.\r\ninterface BarTable {\r\n  [i: BarIndex]: { bar: string };\r\n}\r\nlet s2: BarIndex;\r\nlet t2: BarTable;\r\n\r\n// For assignment from base-types and basic structures: no type-overloading is needed.\r\ns1 = 'foo1';\r\nt1 = {};\r\nt1[s1] = { foo: 1 };\r\n\r\ns2 = 'bar1';\r\nt2 = { 'bar1': { bar: 'barbar' }};\r\n\r\nconsole.log(s2 = s1); // Proposed to be type error.\r\nconsole.log(s2 == s1); // Proposed to be type error.\r\nconsole.log(s2 === s1); // Proposed to be type error.\r\n\r\nt1[s2].foo = 100; // Gives a runtime error. Proposed to be type error.\r\nt1[s1].foo = 100;\r\n\r\nfunction BadFooTest(t: FooTable) {\r\n  if (s2 in t) {  // Proposed to be type error.\r\n    console.log('cool');\r\n    console.log(t[s2].foo); // Proposed to be type error.\r\n  }\r\n}\r\n\r\nfunction GoodBarTest(t: BarTable) {\r\n  if (s2 in t) {\r\n    console.log('cool');\r\n    console.log(t[s2].bar);\r\n  }\r\n}\r\n\r\nBadFooTest(t1); // Gives runtime error;\r\nBadFooTest(t2); // No runtime error, Proposed to be type error.\r\nGoodBarTest(t1); // Gives runtime error; Proposed to be type error.\r\nGoodBarTest(t2);\r\n```\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 30108880,
            "login": "pushkine"
        },
        "id": 752911461,
        "created_at": "2020-11-29T12:58:51Z",
        "title": "instance.constructor type narrowing not working in switch",
        "body": "<!-- 🚨 STOP 🚨 STOP 🚨 STOP 🚨\r\n\r\nHalf of all issues filed here are duplicates, answered in the FAQ, or not appropriate for the bug tracker. Even if you think you've found a *bug*, please read the FAQ first, especially the Common \"Bugs\" That Aren't Bugs section!\r\n\r\nPlease help us by doing the following steps before logging an issue:\r\n  * Search: https://github.com/Microsoft/TypeScript/search?type=Issues\r\n  * Read the FAQ: https://github.com/Microsoft/TypeScript/wiki/FAQ\r\n\r\nPlease fill in the *entire* template below.\r\n-->\r\n\r\n<!--\r\nPlease try to reproduce the issue with the latest published version. It may have already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n-->\r\n**TypeScript Version:**  4.2.0-dev.20201127\r\n\r\n<!-- Search terms you tried before logging this (so others can find this issue more easily) -->\r\n**Search Terms:** switch, narrow, constructor\r\n\r\n**Code**\r\n\r\n```ts\r\nfunction foo(o: any) {\r\n    switch (o.constructor) {\r\n        case Array: {\r\n            o // o: any\r\n        }\r\n    }\r\n}\r\nfunction bar(o: any) {\r\n    if (o.constructor === Array) {\r\n        o // o: any[]\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior:** Both functions narrow the value to `any[]`\r\n\r\n**Actual behavior:** Switch fails to narrow value\r\n\r\n**Playground Link:** [playground](https://www.typescriptlang.org/play?ts=4.2.0-dev.20201129#code/GYVwdgxgLglg9mABMOcAUcBciCGYCeAlIgN4CwAUItYgM4DuMUEAFohgHQQK1QBOIaHD7FyVGhIg5aAU0QBBPnxz5sYiRppxEAeh2IsuApU3UAviZoWK10JFgJEAIxx8M2PEVKXqMYOzguHn5BKGFEAF4ohSUVUR8NbT0DDwIAbQBdBOszIA)\r\n\r\n**Related Issues:** https://github.com/microsoft/TypeScript/issues/2214#issuecomment-431470212, #32774\r\n ",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 30108880,
            "login": "pushkine"
        },
        "id": 752911461,
        "created_at": "2020-11-29T12:58:51Z",
        "title": "instance.constructor type narrowing not working in switch",
        "body": "<!-- 🚨 STOP 🚨 STOP 🚨 STOP 🚨\r\n\r\nHalf of all issues filed here are duplicates, answered in the FAQ, or not appropriate for the bug tracker. Even if you think you've found a *bug*, please read the FAQ first, especially the Common \"Bugs\" That Aren't Bugs section!\r\n\r\nPlease help us by doing the following steps before logging an issue:\r\n  * Search: https://github.com/Microsoft/TypeScript/search?type=Issues\r\n  * Read the FAQ: https://github.com/Microsoft/TypeScript/wiki/FAQ\r\n\r\nPlease fill in the *entire* template below.\r\n-->\r\n\r\n<!--\r\nPlease try to reproduce the issue with the latest published version. It may have already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n-->\r\n**TypeScript Version:**  4.2.0-dev.20201127\r\n\r\n<!-- Search terms you tried before logging this (so others can find this issue more easily) -->\r\n**Search Terms:** switch, narrow, constructor\r\n\r\n**Code**\r\n\r\n```ts\r\nfunction foo(o: any) {\r\n    switch (o.constructor) {\r\n        case Array: {\r\n            o // o: any\r\n        }\r\n    }\r\n}\r\nfunction bar(o: any) {\r\n    if (o.constructor === Array) {\r\n        o // o: any[]\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior:** Both functions narrow the value to `any[]`\r\n\r\n**Actual behavior:** Switch fails to narrow value\r\n\r\n**Playground Link:** [playground](https://www.typescriptlang.org/play?ts=4.2.0-dev.20201129#code/GYVwdgxgLglg9mABMOcAUcBciCGYCeAlIgN4CwAUItYgM4DuMUEAFohgHQQK1QBOIaHD7FyVGhIg5aAU0QBBPnxz5sYiRppxEAeh2IsuApU3UAviZoWK10JFgJEAIxx8M2PEVKXqMYOzguHn5BKGFEAF4ohSUVUR8NbT0DDwIAbQBdBOszIA)\r\n\r\n**Related Issues:** https://github.com/microsoft/TypeScript/issues/2214#issuecomment-431470212, #32774\r\n ",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 3396686,
            "login": "saschanaz"
        },
        "id": 752916146,
        "created_at": "2020-11-29T13:22:41Z",
        "title": "import.meta.url is not supported in module : es2020",
        "body": "<!-- 🚨 STOP 🚨 STOP 🚨 STOP 🚨\r\n\r\nHalf of all issues filed here are duplicates, answered in the FAQ, or not appropriate for the bug tracker. Even if you think you've found a *bug*, please read the FAQ first, especially the Common \"Bugs\" That Aren't Bugs section!\r\n\r\nPlease help us by doing the following steps before logging an issue:\r\n  * Search: https://github.com/Microsoft/TypeScript/search?type=Issues\r\n  * Read the FAQ: https://github.com/Microsoft/TypeScript/wiki/FAQ\r\n\r\nPlease fill in the *entire* template below.\r\n-->\r\n\r\n<!--\r\nPlease try to reproduce the issue with the latest published version. It may have already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n-->\r\n**TypeScript Version:**  4.2.0-dev.20201129\r\n\r\n<!-- Search terms you tried before logging this (so others can find this issue more easily) -->\r\n**Search Terms:** import.meta.url\r\n\r\n**Code** \r\n\r\n```ts\r\nexport function foo() {\r\n  return import.meta.url;\r\n}\r\n```\r\n\r\n**Expected behavior:** It should work\r\n\r\n**Actual behavior:** `Property 'url' does not exist on type 'ImportMeta'.`\r\n\r\n**Playground Link:** https://www.typescriptlang.org/play?target=7&ts=4.2.0-dev.20201129#code/KYDwDg9gTgLgBAMwK4DsDGMCWEWIhACgEo4BvAWACg44pgYkpdMBbSWAOhfoEMPGANgG4qAXyA\r\n\r\n**Related Issues:** #41274 didn't add `url` in `ImportMeta`, which is supported by [HTML](https://html.spec.whatwg.org/multipage/webappapis.html#hostgetimportmetaproperties).\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 30108880,
            "login": "pushkine"
        },
        "id": 752911461,
        "created_at": "2020-11-29T12:58:51Z",
        "title": "instance.constructor type narrowing not working in switch",
        "body": "<!-- 🚨 STOP 🚨 STOP 🚨 STOP 🚨\r\n\r\nHalf of all issues filed here are duplicates, answered in the FAQ, or not appropriate for the bug tracker. Even if you think you've found a *bug*, please read the FAQ first, especially the Common \"Bugs\" That Aren't Bugs section!\r\n\r\nPlease help us by doing the following steps before logging an issue:\r\n  * Search: https://github.com/Microsoft/TypeScript/search?type=Issues\r\n  * Read the FAQ: https://github.com/Microsoft/TypeScript/wiki/FAQ\r\n\r\nPlease fill in the *entire* template below.\r\n-->\r\n\r\n<!--\r\nPlease try to reproduce the issue with the latest published version. It may have already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n-->\r\n**TypeScript Version:**  4.2.0-dev.20201127\r\n\r\n<!-- Search terms you tried before logging this (so others can find this issue more easily) -->\r\n**Search Terms:** switch, narrow, constructor\r\n\r\n**Code**\r\n\r\n```ts\r\nfunction foo(o: any) {\r\n    switch (o.constructor) {\r\n        case Array: {\r\n            o // o: any\r\n        }\r\n    }\r\n}\r\nfunction bar(o: any) {\r\n    if (o.constructor === Array) {\r\n        o // o: any[]\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior:** Both functions narrow the value to `any[]`\r\n\r\n**Actual behavior:** Switch fails to narrow value\r\n\r\n**Playground Link:** [playground](https://www.typescriptlang.org/play?ts=4.2.0-dev.20201129#code/GYVwdgxgLglg9mABMOcAUcBciCGYCeAlIgN4CwAUItYgM4DuMUEAFohgHQQK1QBOIaHD7FyVGhIg5aAU0QBBPnxz5sYiRppxEAeh2IsuApU3UAviZoWK10JFgJEAIxx8M2PEVKXqMYOzguHn5BKGFEAF4ohSUVUR8NbT0DDwIAbQBdBOszIA)\r\n\r\n**Related Issues:** https://github.com/microsoft/TypeScript/issues/2214#issuecomment-431470212, #32774\r\n ",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 937933,
            "login": "zpdDG4gta8XKpMCd"
        },
        "id": 145235868,
        "created_at": "2016-04-01T17:22:53Z",
        "title": "add a modifier for pure functions",
        "body": "This is what pure means:\r\n1. no destructive operations on parameters\r\n2. all parameters must be guaranteed from being changed from the outside (immutable?)\r\n2. no calls to any other callback/function/method/constructor that doesn't have the pure modifier\r\n3. no reads from mutable values from a scope the pure function is closed over\r\n4. no writes to values in the closed scope\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 6409354,
            "login": "awgv"
        },
        "id": 680522981,
        "created_at": "2020-08-13T14:36:14Z",
        "title": "The intellisense for Foo.js is provided via a corresponding Foo.d.ts only when it’s imported somewhere—in a different file, but not in the Foo.js itself.",
        "body": "- VSCode Version: 1.47.3 (system setup)\r\n- OS Version: Windows_NT x64 10.0.19041\r\n\r\nHere’s a contrived directory structure of a React app:\r\n\r\n```\r\n.\r\n└── src\r\n    └── Components\r\n        └── Foo\r\n            ├── Bar\r\n            │   ├── Bar.js\r\n            │   └── Bar.d.ts\r\n            └── Foo.js\r\n```\r\n\r\n```JS\r\n// React component `Foo` imports a component `Bar`:\r\n\r\nimport { Bar } from './Bar/Bar'\r\n\r\nexport function Foo() {\r\n  //\r\n}\r\n```\r\n\r\n```TypeScript\r\n// And gets full intellisense via `Bar.d.ts`:\r\n\r\ntype Props = {\r\n  /** ... */\r\n}\r\n\r\nexport declare function Bar(\r\n  props: Props\r\n): React.FunctionComponent\r\n```\r\n\r\nBut `Bar.js` itself doesn’t get intellisense from its own `Bar.d.ts` file—it’s like the `.d.ts` doesn’t exist—am I doing something wrong, or is it how it’s supposed to work in the current version of VSCode? I tried the triple-slash directive (`/// <reference path=\"Bar.d.ts\"/>`), but it didn’t help. Some JSDoc helped, but it’s rather pointless to have a dedicated declaration file and still use JSDoc:\r\n\r\n```JS\r\nexport function Bar(\r\n  // When `type Props` is exported from the `.d.ts`:\r\n  /** @type {import(\"./Bar\").Props} */ props\r\n) {\r\n```\r\n\r\nI tried the Insiders build—same thing. I also prepared [a repository](https://github.com/awgv/vscode-intellisense-issue) representing the example above in case you want to check something yourself. Initially, I asked it as a StackOverflow question ([link](https://stackoverflow.com/questions/63235665/vscode-provides-intellisense-for-foo-js-via-a-corresponding-foo-d-ts-only-when-i)), but didn’t get an answer, so if you think this is a usage question, please leave an answer there.",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 3902892,
            "login": "rbuckton"
        },
        "id": 485037947,
        "created_at": "2019-08-26T04:34:05Z",
        "title": "Support for NodeJS 12.7+ package exports",
        "body": "NodeJS 12.7 added support for a (currently experimental) feature for custom package imports and exports in `package.json`: https://github.com/jkrems/proposal-pkg-exports/\r\n\r\nIn short, this feature allows a package author to redirect exports in their package to alternate locations:\r\n\r\n```jsonc\r\n{\r\n  \"name\": \"pkg\",\r\n  /* [...] */\r\n  \"exports\": {\r\n    \"./foo\": \"./target.js\",\r\n    \"./bar/\": \"./dist/nested/dir/\"\r\n  }\r\n}\r\n```\r\n\r\nThis is currently only available when `--experiemental-exports` is passed to NodeJS, however we should continue to track the development of this feature as it progresses.",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 5655961,
            "login": "AnyhowStep"
        },
        "id": 438182696,
        "created_at": "2019-04-29T07:29:49Z",
        "title": "Typeguard with \"\"|undefined not working",
        "body": "<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨\r\n\r\nHalf of all issues filed here are duplicates, answered in the FAQ, or not appropriate for the bug tracker. Even if you think you've found a *bug*, please read the FAQ first, especially the Common \"Bugs\" That Aren't Bugs section!\r\n\r\nPlease help us by doing the following steps before logging an issue:\r\n  * Search: https://github.com/Microsoft/TypeScript/search?type=Issues\r\n  * Read the FAQ: https://github.com/Microsoft/TypeScript/wiki/FAQ\r\n\r\nPlease fill in the *entire* template below.\r\n-->\r\n\r\n<!-- Please try to reproduce the issue with `typescript@next`. It may have already been fixed. -->\r\n**TypeScript Version:**  3.3.0, and the version on TS playground (3.4.1 as of this writing)\r\n\r\n<!-- Search terms you tried before logging this (so others can find this issue more easily) -->\r\n**Search Terms:** typeguard, empty string literal, undefined, union\r\n\r\n**Code**\r\n\r\n```ts\r\n//--strictNullChecks\r\ntype Falsy<T> = (\r\n    | Extract<0, T>\r\n    | Extract<\r\n        (\r\n            | false\r\n            | null\r\n            | undefined\r\n            //Actually, only 0|NaN\r\n            //But TS does not support NaN literal\r\n            | number\r\n            | \"\"\r\n            | 0n\r\n            | HTMLAllCollection\r\n        ),\r\n        T\r\n    >\r\n);\r\ndeclare const emptyStrOrUndefined: Falsy<string | undefined>;\r\ndeclare function isFalsy<T>(\r\n    mixed: T\r\n): mixed is Falsy<T>;\r\n\r\ndeclare const s: string | undefined;\r\n/*\r\n    Hovering over this isFalsy() call gives me,\r\n    function isFalsy<string | undefined>(mixed: string | undefined): mixed is \"\" | undefined\r\n\r\n    This is as expected\r\n*/\r\nif (isFalsy(s)) {\r\n    //Expected: s should be \"\"|undefined now\r\n    //Actual: s is undefined\r\n    if (s == undefined) {\r\n        //Should be undefined now\r\n        console.log(s);\r\n    } else {\r\n        //Expected: Should be \"\" now\r\n        //Actual: s is `never`\r\n        //Property 'length' does not exist on type 'never'.\r\n        console.log(s.length);\r\n    }\r\n}\r\n\r\ndeclare function isEmptyStrOrUndefined(mixed: any): mixed is \"\" | undefined;\r\nif (isEmptyStrOrUndefined(s)) {\r\n    //Expected: s should be \"\"|undefined now\r\n    //Actual: s is undefined\r\n    if (s == undefined) {\r\n        //Should be undefined now\r\n        console.log(s);\r\n    } else {\r\n        //Expected: Should be \"\" now\r\n        //Actual: s is `never`\r\n        //Property 'length' does not exist on type 'never'.\r\n        console.log(s.length);\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\n\r\n`s` should be `\"\"|undefined` where marked.\r\n\r\nAlso, unrelated, but this is where I would have liked a `NaN` literal in TS =/\r\n\r\n**Actual behavior:**\r\n\r\n`s` is `undefined`\r\n\r\n**Playground Link:** [Here](https://www.typescriptlang.org/play/#src=%2F%2F--strictNullChecks%0D%0Atype%20Falsy%3CT%3E%20%3D%20(%0D%0A%20%20%20%20%7C%20Extract%3C0%2C%20T%3E%0D%0A%20%20%20%20%7C%20Extract%3C%0D%0A%20%20%20%20%20%20%20%20(%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7C%20false%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7C%20null%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7C%20undefined%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2FActually%2C%20only%200%7CNaN%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2FBut%20TS%20does%20not%20support%20NaN%20literal%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7C%20number%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%22%22%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7C%200n%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7C%20HTMLAllCollection%0D%0A%20%20%20%20%20%20%20%20)%2C%0D%0A%20%20%20%20%20%20%20%20T%0D%0A%20%20%20%20%3E%0D%0A)%3B%0D%0Adeclare%20const%20emptyStrOrUndefined%3A%20Falsy%3Cstring%20%7C%20undefined%3E%3B%0D%0Adeclare%20function%20isFalsy%3CT%3E(%0D%0A%20%20%20%20mixed%3A%20T%0D%0A)%3A%20mixed%20is%20Falsy%3CT%3E%3B%0D%0A%0D%0Adeclare%20const%20s%3A%20string%20%7C%20undefined%3B%0D%0A%2F*%0D%0A%20%20%20%20Hovering%20over%20this%20isFalsy()%20call%20gives%20me%2C%0D%0A%20%20%20%20function%20isFalsy%3Cstring%20%7C%20undefined%3E(mixed%3A%20string%20%7C%20undefined)%3A%20mixed%20is%20%22%22%20%7C%20undefined%0D%0A%0D%0A%20%20%20%20This%20is%20as%20expected%0D%0A*%2F%0D%0Aif%20(isFalsy(s))%20%7B%0D%0A%20%20%20%20%2F%2FExpected%3A%20s%20should%20be%20%22%22%7Cundefined%20now%0D%0A%20%20%20%20%2F%2FActual%3A%20s%20is%20undefined%0D%0A%20%20%20%20if%20(s%20%3D%3D%20undefined)%20%7B%0D%0A%20%20%20%20%20%20%20%20%2F%2FShould%20be%20undefined%20now%0D%0A%20%20%20%20%20%20%20%20console.log(s)%3B%0D%0A%20%20%20%20%7D%20else%20%7B%0D%0A%20%20%20%20%20%20%20%20%2F%2FExpected%3A%20Should%20be%20%22%22%20now%0D%0A%20%20%20%20%20%20%20%20%2F%2FActual%3A%20s%20is%20%60never%60%0D%0A%20%20%20%20%20%20%20%20%2F%2FProperty%20'length'%20does%20not%20exist%20on%20type%20'never'.%0D%0A%20%20%20%20%20%20%20%20console.log(s.length)%3B%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Adeclare%20function%20isEmptyStrOrUndefined(mixed%3A%20string%7Cundefined)%3A%20mixed%20is%20%22%22%20%7C%20undefined%3B%0D%0Aif%20(isEmptyStrOrUndefined(s))%20%7B%0D%0A%20%20%20%20%2F%2FExpected%3A%20s%20should%20be%20%22%22%7Cundefined%20now%0D%0A%20%20%20%20%2F%2FActual%3A%20s%20is%20undefined%0D%0A%20%20%20%20if%20(s%20%3D%3D%20undefined)%20%7B%0D%0A%20%20%20%20%20%20%20%20%2F%2FShould%20be%20undefined%20now%0D%0A%20%20%20%20%20%20%20%20console.log(s)%3B%0D%0A%20%20%20%20%7D%20else%20%7B%0D%0A%20%20%20%20%20%20%20%20%2F%2FExpected%3A%20Should%20be%20%22%22%20now%0D%0A%20%20%20%20%20%20%20%20%2F%2FActual%3A%20s%20is%20%60never%60%0D%0A%20%20%20%20%20%20%20%20%2F%2FProperty%20'length'%20does%20not%20exist%20on%20type%20'never'.%0D%0A%20%20%20%20%20%20%20%20console.log(s.length)%3B%0D%0A%20%20%20%20%7D%0D%0A%7D)\r\n\r\n**Related Issues:** Not that I could find\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 4697200,
            "login": "tchetwin"
        },
        "id": 744577027,
        "created_at": "2020-11-17T09:46:14Z",
        "title": "v4.0.x -> v4.1.1-rc change in overload selection",
        "body": "**TypeScript Version:**  4.1.0-dev.20201029, 4.1.1-rc\r\n\r\n**Search Terms:** overload\r\n\r\n**Code**\r\n\r\n```ts\r\nimport { promisify } from \"util\";\r\n\r\n// These are components of @types/xml2js@0.4.5\r\nexport interface convertableToString {\r\n    toString(): string;\r\n}\r\ndeclare class Parser {\r\n    parseString(str: convertableToString, cb?: Function): void;\r\n}\r\n\r\nconst xmlParser = new Parser();\r\nconst parseString = xmlParser.parseString.bind(xmlParser);\r\nconst parseStringP = promisify(parseString); // <--- interested in overload selection from this line\r\n\r\nparseStringP(\"abc\");\r\n//           ^--- error surfaces here\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nNo error. This overload is selected from `promisify`:\r\n\r\n```\r\n(alias) promisify<convertableToString, unknown>(fn: (arg1: convertableToString, callback: (err: any, result: unknown) => void) => void): (arg1: convertableToString) => Promise<...> (+13 overloads)\r\n```\r\n\r\n**Actual behavior:**\r\n\r\n`Expected 0 arguments, but got 1. (2554)` (on the argument to `parseStringP`). This overload is selected from `promisify`:\r\n\r\n```\r\n(alias) promisify<unknown>(fn: (callback: (err: any, result: unknown) => void) => void): () => Promise<unknown> (+13 overloads)\r\n```\r\n\r\n**Notes:**\r\n\r\nOverloads from [unpkg](https://www.unpkg.com/@types/node@14.14.7/util.d.ts):\r\n\r\n```ts\r\ninterface CustomPromisifyLegacy<TCustom extends Function> extends Function {\r\n    __promisify__: TCustom;\r\n}\r\ninterface CustomPromisifySymbol<TCustom extends Function> extends Function {\r\n    [promisify.custom]: TCustom;\r\n}\r\ntype CustomPromisify<TCustom extends Function> = CustomPromisifySymbol<TCustom> | CustomPromisifyLegacy<TCustom>;\r\n\r\nfunction promisify<TCustom extends Function>(fn: CustomPromisify<TCustom>): TCustom;\r\nfunction promisify<TResult>(fn: (callback: (err: any, result: TResult) => void) => void): () => Promise<TResult>;\r\nfunction promisify(fn: (callback: (err?: any) => void) => void): () => Promise<void>;\r\nfunction promisify<T1, TResult>(fn: (arg1: T1, callback: (err: any, result: TResult) => void) => void): (arg1: T1) => Promise<TResult>;\r\nfunction promisify<T1>(fn: (arg1: T1, callback: (err?: any) => void) => void): (arg1: T1) => Promise<void>;\r\nfunction promisify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2, callback: (err: any, result: TResult) => void) => void): (arg1: T1, arg2: T2) => Promise<TResult>;\r\nfunction promisify<T1, T2>(fn: (arg1: T1, arg2: T2, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2) => Promise<void>;\r\n// removed overloads with 3, 4 & 5 template parameters for brevity\r\nfunction promisify(fn: Function): Function;\r\n```\r\n\r\n**Playground Links:**\r\n\r\n[4.1.0-beta](https://www.typescriptlang.org/play?ts=4.1.0-dev.20201028#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) ✔️ \r\n[4.1.0-dev.20201028](https://www.typescriptlang.org/play?ts=4.1.0-dev.20201028#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) ✔️ \r\n[4.1.0-dev.20201029](https://www.typescriptlang.org/play?ts=4.1.0-dev.20201029#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) ❌ \r\n[4.1.1-rc](https://www.typescriptlang.org/play?ts=4.1.1-rc#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) :x:\r\n[4.2.0-dev.20201112](https://www.typescriptlang.org/play?ts=4.2.0-dev.20201112#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) ❌ \r\n\r\n**Related Issues:**\r\n\r\nhttps://github.com/microsoft/TypeScript/issues/41099 - Similar *looking* but the version introducing the regression doesn't align.\r\nhttps://github.com/microsoft/TypeScript/issues/41359#issuecomment-721383363 - Previously reported in this Issue",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 749374,
            "login": "slorber"
        },
        "id": 459969830,
        "created_at": "2019-06-24T15:53:19Z",
        "title": "import ConstJson from './config.json' as const;",
        "body": "\r\n\r\n## Search Terms\r\n\r\njson const assertion import\r\n\r\n## Suggestion\r\n\r\nThe ability to get const types from a json configuration file.\r\n\r\nIE if the json is:\r\n\r\n```json\r\n{\r\n  appLocales: [\"FR\",\"BE\"]\r\n}\r\n```\r\n\r\nI want to import the json and get the type `{appLocales: \"FR\" | \"BE\"}` instead of `string`\r\n\r\n## Use Cases\r\n\r\nCurrent approach gives a too broad type `string`. I understand it may make sense as a default, but having the possibility to import a narrower type would be helpful: it would permit me to avoid maintaining both a runtime locale list + a union type that contains the values that are already in the list, ensuring my type and my runtime values are in sync.\r\n\r\n## Checklist\r\n\r\nMy suggestion meets these guidelines:\r\n\r\n* [X] This wouldn't be a breaking change in existing TypeScript/JavaScript code\r\n* [X] This wouldn't change the runtime behavior of existing JavaScript code\r\n* [X] This could be implemented without emitting different JS based on the types of the expressions\r\n* [X] This isn't a runtime feature (e.g. library functionality, non-ECMAScript syntax with JavaScript output, etc.)\r\n* [X] This feature would agree with the rest of [TypeScript's Design Goals](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals).\r\n\r\n## Links:\r\n\r\nThis feature has been mentionned:\r\n- by @qm3ster and @maartenth https://github.com/microsoft/TypeScript/pull/29510#issuecomment-456833107\r\n- by @m-b-davis https://github.com/Microsoft/TypeScript/issues/26552#issuecomment-496925984\r\n\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 4697200,
            "login": "tchetwin"
        },
        "id": 744577027,
        "created_at": "2020-11-17T09:46:14Z",
        "title": "v4.0.x -> v4.1.1-rc change in overload selection",
        "body": "**TypeScript Version:**  4.1.0-dev.20201029, 4.1.1-rc\r\n\r\n**Search Terms:** overload\r\n\r\n**Code**\r\n\r\n```ts\r\nimport { promisify } from \"util\";\r\n\r\n// These are components of @types/xml2js@0.4.5\r\nexport interface convertableToString {\r\n    toString(): string;\r\n}\r\ndeclare class Parser {\r\n    parseString(str: convertableToString, cb?: Function): void;\r\n}\r\n\r\nconst xmlParser = new Parser();\r\nconst parseString = xmlParser.parseString.bind(xmlParser);\r\nconst parseStringP = promisify(parseString); // <--- interested in overload selection from this line\r\n\r\nparseStringP(\"abc\");\r\n//           ^--- error surfaces here\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nNo error. This overload is selected from `promisify`:\r\n\r\n```\r\n(alias) promisify<convertableToString, unknown>(fn: (arg1: convertableToString, callback: (err: any, result: unknown) => void) => void): (arg1: convertableToString) => Promise<...> (+13 overloads)\r\n```\r\n\r\n**Actual behavior:**\r\n\r\n`Expected 0 arguments, but got 1. (2554)` (on the argument to `parseStringP`). This overload is selected from `promisify`:\r\n\r\n```\r\n(alias) promisify<unknown>(fn: (callback: (err: any, result: unknown) => void) => void): () => Promise<unknown> (+13 overloads)\r\n```\r\n\r\n**Notes:**\r\n\r\nOverloads from [unpkg](https://www.unpkg.com/@types/node@14.14.7/util.d.ts):\r\n\r\n```ts\r\ninterface CustomPromisifyLegacy<TCustom extends Function> extends Function {\r\n    __promisify__: TCustom;\r\n}\r\ninterface CustomPromisifySymbol<TCustom extends Function> extends Function {\r\n    [promisify.custom]: TCustom;\r\n}\r\ntype CustomPromisify<TCustom extends Function> = CustomPromisifySymbol<TCustom> | CustomPromisifyLegacy<TCustom>;\r\n\r\nfunction promisify<TCustom extends Function>(fn: CustomPromisify<TCustom>): TCustom;\r\nfunction promisify<TResult>(fn: (callback: (err: any, result: TResult) => void) => void): () => Promise<TResult>;\r\nfunction promisify(fn: (callback: (err?: any) => void) => void): () => Promise<void>;\r\nfunction promisify<T1, TResult>(fn: (arg1: T1, callback: (err: any, result: TResult) => void) => void): (arg1: T1) => Promise<TResult>;\r\nfunction promisify<T1>(fn: (arg1: T1, callback: (err?: any) => void) => void): (arg1: T1) => Promise<void>;\r\nfunction promisify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2, callback: (err: any, result: TResult) => void) => void): (arg1: T1, arg2: T2) => Promise<TResult>;\r\nfunction promisify<T1, T2>(fn: (arg1: T1, arg2: T2, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2) => Promise<void>;\r\n// removed overloads with 3, 4 & 5 template parameters for brevity\r\nfunction promisify(fn: Function): Function;\r\n```\r\n\r\n**Playground Links:**\r\n\r\n[4.1.0-beta](https://www.typescriptlang.org/play?ts=4.1.0-dev.20201028#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) ✔️ \r\n[4.1.0-dev.20201028](https://www.typescriptlang.org/play?ts=4.1.0-dev.20201028#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) ✔️ \r\n[4.1.0-dev.20201029](https://www.typescriptlang.org/play?ts=4.1.0-dev.20201029#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) ❌ \r\n[4.1.1-rc](https://www.typescriptlang.org/play?ts=4.1.1-rc#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) :x:\r\n[4.2.0-dev.20201112](https://www.typescriptlang.org/play?ts=4.2.0-dev.20201112#code/JYWwDg9gTgLgBAbzmKETAM7AGYE84C+c2qIcARAK4zAA25A3AFBMD0rcAKgBYCmGvOAEMoggMZpIAO15SYGOBGxwAAjFxh+rAB4haAJgBWGFQAYAdABZzAVia9tkWHGBzeUbELHiIUgG7uMEIARrS8nBAAyjBQrgDmiExwyXAwUTHxABQAlABccBgZUnHMBEwAJrxitCLiNRgKAAoiAlCJKXDscAAGYsHdcCBC+FIQ8MGCMHxwE4WpGrxJKV3J0MBxrvncMDBgGLnsG1OUweYSIKwAIrzYrsAwvLS4nAvlVzd3D08vmm+hEMFWAAOADsIWCIIAnAA2coARjEQlMAGZoSC4UCbEIgdChDYgaYxEDglibHCbKZ9DCiax1JoMDo9EYGa5KtpzOVzPIAMQAGWRyKWyTALV40VixUyhSg+Qk-kCITCEXF8QANHA+gB+fIAMUoUjENF8eTgfggwHKpRYcrmulozSgrTgAF44DIAO5wB2tHLMG3wEWOsVFBKuu3e9zmQMCFXFczBVmZcOiqDZP2+ObR4MSuKNF3IUiYHC4TJZ2NxNMsMshxqZcghMTkStdAC0bfbHYAekwgA) ❌ \r\n\r\n**Related Issues:**\r\n\r\nhttps://github.com/microsoft/TypeScript/issues/41099 - Similar *looking* but the version introducing the regression doesn't align.\r\nhttps://github.com/microsoft/TypeScript/issues/41359#issuecomment-721383363 - Previously reported in this Issue",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 47453366,
            "login": "tscpp"
        },
        "id": 714071635,
        "created_at": "2020-10-03T11:41:30Z",
        "title": "Documented server plugin example fails with relative path",
        "body": "<!-- 🚨 STOP 🚨 STOP 🚨 STOP 🚨\r\n\r\nHalf of all issues filed here are duplicates, answered in the FAQ, or not appropriate for the bug tracker. Even if you think you've found a *bug*, please read the FAQ first, especially the Common \"Bugs\" That Aren't Bugs section!\r\n\r\nPlease help us by doing the following steps before logging an issue:\r\n  * Search: https://github.com/Microsoft/TypeScript/search?type=Issues\r\n  * Read the FAQ: https://github.com/Microsoft/TypeScript/wiki/FAQ\r\n\r\nPlease fill in the *entire* template below.\r\n-->\r\n\r\n<!--\r\nPlease try to reproduce the issue with the latest published version. It may have already been fixed.\r\nFor npm: `typescript@next`\r\n\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n-->\r\n**TypeScript Version:**  4.0.3 & 4.1.0-dev.20201003\r\n\r\n<!-- Search terms you tried before logging this (so others can find this issue more easily) -->\r\n**Search Terms:** plugin link path\r\n\r\n**Code**\r\n\r\n[Writing a Language Service Plugin | Putting it all together](https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin#putting-it-all-together)\r\n<sub>https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin#putting-it-all-together</sub>\r\n\r\n**Summary:**\r\n\r\n\r\n\r\nI have recreated the example plugin found in the documentation at [Writing a Language Service Plugin](https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin).\r\n\r\nThe example works when using 'npm link', but not with relative paths.\r\n\r\n![](https://user-images.githubusercontent.com/47453366/94990518-12d60980-057d-11eb-8720-103bfbd10c3c.png)\r\n\r\nI referred to the plugin in tsconfig like this:\r\n```\r\n\"plugins\": [{\r\n\t\"name\": \"../plugin\"\r\n}]\r\n```\r\n\r\nI have also tried to refer to `../plugin/index` and `../plugin/index.js`, but neither of them works.\r\n\r\n**Expected behavior:**\r\n\r\nBe able to refer to the plugin with a relative path.\r\n\r\n**Actual behavior:**\r\n\r\nSilently fails without the plugin being loaded.",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 19352442,
            "login": "AleksandrHovhannisyan"
        },
        "id": 752755632,
        "created_at": "2020-11-28T19:54:30Z",
        "title": "Async functions that return booleans: un-awaited function calls are not flagged as always being truthy",
        "body": "**TypeScript Version:**  4.1.2\r\n\r\n**Search Terms:** async functions, booleans, async return values, async booleans\r\n\r\n**Code**\r\n\r\n```ts\r\nconst isBroken = async () => false;\r\n\r\nif (isBroken()) {\r\n  console.log('asd')\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nTypeScript should warn you that the expression evaluated in the `if` statement will always be `true`. [See my explanation of this behavior here](https://www.aleksandrhovhannisyan.com/blog/dev/async-functions-that-return-booleans/). \r\n\r\nIf you remove the function call and just do `if (isBroken)`, TypeScript will rightly complain that the expression will always return `true`:\r\n\r\n![image](https://user-images.githubusercontent.com/19352442/100524781-f0c9c380-3188-11eb-805a-803de63d5e9f.png)\r\n\r\nThat's because functions are truthy objects, so when they're coerced to booleans, they're always true. Likewise, an async function returns a Promise object implicitly, and that's always truthy. So TypeScript should really flag that as an error, but it doesn't.\r\n\r\n**Actual behavior:**\r\n\r\nTypeScript does not complain. The code can lead to bugs, but it's something that can be checked statically before the code is ever compiled.\r\n\r\n**Playground Link:**\r\n\r\nhttps://www.typescriptlang.org/play?#code/MYewdgzgLgBAlhAQgJxAawKZhgXhgQwgE8xgYAKASlwD4YAzfAGwgwG4AoDueihFdFmoBvDjBihIIJhgB0TEAHNyAckIATFZQ4BfIA\r\n**Related Issues:** <!-- Did you find other bugs that looked similar? -->\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 19352442,
            "login": "AleksandrHovhannisyan"
        },
        "id": 752755632,
        "created_at": "2020-11-28T19:54:30Z",
        "title": "Async functions that return booleans: un-awaited function calls are not flagged as always being truthy",
        "body": "**TypeScript Version:**  4.1.2\r\n\r\n**Search Terms:** async functions, booleans, async return values, async booleans\r\n\r\n**Code**\r\n\r\n```ts\r\nconst isBroken = async () => false;\r\n\r\nif (isBroken()) {\r\n  console.log('asd')\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nTypeScript should warn you that the expression evaluated in the `if` statement will always be `true`. [See my explanation of this behavior here](https://www.aleksandrhovhannisyan.com/blog/dev/async-functions-that-return-booleans/). \r\n\r\nIf you remove the function call and just do `if (isBroken)`, TypeScript will rightly complain that the expression will always return `true`:\r\n\r\n![image](https://user-images.githubusercontent.com/19352442/100524781-f0c9c380-3188-11eb-805a-803de63d5e9f.png)\r\n\r\nThat's because functions are truthy objects, so when they're coerced to booleans, they're always true. Likewise, an async function returns a Promise object implicitly, and that's always truthy. So TypeScript should really flag that as an error, but it doesn't.\r\n\r\n**Actual behavior:**\r\n\r\nTypeScript does not complain. The code can lead to bugs, but it's something that can be checked statically before the code is ever compiled.\r\n\r\n**Playground Link:**\r\n\r\nhttps://www.typescriptlang.org/play?#code/MYewdgzgLgBAlhAQgJxAawKZhgXhgQwgE8xgYAKASlwD4YAzfAGwgwG4AoDueihFdFmoBvDjBihIIJhgB0TEAHNyAckIATFZQ4BfIA\r\n**Related Issues:** <!-- Did you find other bugs that looked similar? -->\r\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 7620906,
            "login": "chenesan"
        },
        "id": 750534865,
        "created_at": "2020-11-25T06:40:38Z",
        "title": "Cannot identify params type when define typed variables with generic arrow function",
        "body": "<!-- 🚨 STOP 🚨 STOP 🚨 STOP 🚨\r\n\r\nHalf of all issues filed here are duplicates, answered in the FAQ, or not appropriate for the bug tracker. Even if you think you've found a *bug*, please read the FAQ first, especially the Common \"Bugs\" That Aren't Bugs section!\r\n\r\nPlease help us by doing the following steps before logging an issue:\r\n  * Search: https://github.com/Microsoft/TypeScript/search?type=Issues\r\n  * Read the FAQ: https://github.com/Microsoft/TypeScript/wiki/FAQ\r\n\r\nPlease fill in the *entire* template below.\r\n-->\r\n\r\n<!--\r\nPlease try to reproduce the issue with the latest published version. It may have already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n-->\r\n**TypeScript Version:**  4.2.0-dev.20201124\r\n\r\n<!-- Search terms you tried before logging this (so others can find this issue more easily) -->\r\n**Search Terms:** generic arrow function, type inference, contextual type\r\n\r\n**Code**\r\n\r\n```ts\r\n// Let's assume there's a compute function in another module.\r\nfunction computeFn<T>(arg: T): T {\r\n  return arg;\r\n}\r\n\r\n// In non-generic arrow function use case, we can declare function type and assign it to the variable\r\n// and `arg` will be infered as number type.\r\nexport type NormalFn = (arg: number) => number;\r\nconst normalFn: NormalFn = (arg) => {\r\n  return arg;\r\n};\r\n\r\n// In generic use case, we can still do this and TypeScript will infer `arg` as T.\r\nexport type GenericFn = <T>(arg: T) => T;\r\nconst genericFn: GenericFn = (arg) => {\r\n  return arg;\r\n}\r\n\r\n// However, once we need the generic type in function (ex. call another generic func)\r\n// we have to declare generic before the arrow function\r\n// Then, the arg will be infered as `any`, which is not (I think) the expected behavior.\r\n\r\nconst genericFn2: GenericFn = <T>(arg) => { \r\n  // `arg` will be infered as `any`\r\n  return computeFn<T>(arg)\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nIn the third use case (`genericFn2`), the parameters should be infered as `T`, which match the variable's type.\r\n\r\n**Actual behavior:**\r\n\r\nTypeScript will infer parameter type as `any`.\r\n\r\n**Playground Link:** https://www.typescriptlang.org/play?ts=4.2.0-dev.20201124#code/MYewdgzgLgBKC2AHArlApgMTDAvDAPACoA0MAfABQCGATgOYBcMhAlLmTLXQNwCwAUGgAeiEDVhQAnojQwA4mjBoaAS2BZcBQpS5NW7Zn0EixsUJFh1FytViYKlq9djxFSO+mxwcA3gJgwNGhQyDTYCCjoWEQedCwCAL4CAlaOtmAUAORUmSzcQA\r\n\r\n**Related Issues:** <!-- Did you find other bugs that looked similar? -->\r\nLooks similar to https://github.com/microsoft/TypeScript/issues/25293, which is wontfix. But I'm not sure if they are the same thing actually.",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 49038,
            "login": "orta"
        },
        "id": 645697924,
        "created_at": "2020-06-25T16:28:15Z",
        "title": "Remove assignability cases in getNarrowedType + an isArray improvement for readonly arrays ",
        "body": "Fixes #31155 \r\nFixes #17002\r\n\r\nThere are two pieces to this PR:\r\n\r\n - The fix for #31155 which came from #32443\r\n - Unblocking #17002 which stopped #32443\r\n\r\nThe 2nd was blocked on :\r\n\r\n> TLDR: any[] is assignable to IAction | ReadonlyArray<IAction>, but it's not a subtype. The issue here is that readonly arrays are not subtypes of mutable arrays so we end up falling back to the intersection case.\r\n\r\nWhere :\r\n\r\n```ts\r\ninterface IAction {\r\n    x: string;\r\n}\r\n\r\ndeclare const arg: IAction | ReadonlyArray<IAction>;\r\nconst x = Array.isArray(arg) ? arg : [arg];\r\n```\r\n\r\nIs now legal due to changes in the `isArray` definition which takes into account `readonly` arrays.\r\n\r\n\r\n/cc @jack-williams ",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 599459,
            "login": "maraisr"
        },
        "id": 748609073,
        "created_at": "2020-11-23T08:59:34Z",
        "title": "Destructing doesnt allow for discriminated union",
        "body": "**TypeScript Version:**  4.1.0-beta\r\n\r\n**Code**\r\n```ts\r\nfunction generate(who: string): {json: true, body: {hello: string}} | {json: false, body: string} {\r\n    return {json: true, body: {hello: who}}\r\n}\r\n\r\nconst {body, json} = generate('world');\r\n\r\nif (json) {\r\n    body // should give you auto-complete, for `.hello`\r\n} else {\r\n    body // should be a string, thus giving `includes` as an example\r\n}\r\n```\r\n\r\n**Issue**\r\nAs you'll find from the code example, `body` on line 8 doesnt autocomplete with `.hello`\r\n\r\n<details><summary><b>Compiler Options</b></summary>\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"noImplicitAny\": true,\r\n    \"strictNullChecks\": true,\r\n    \"strictFunctionTypes\": true,\r\n    \"strictPropertyInitialization\": true,\r\n    \"strictBindCallApply\": true,\r\n    \"noImplicitThis\": true,\r\n    \"noImplicitReturns\": true,\r\n    \"alwaysStrict\": true,\r\n    \"esModuleInterop\": true,\r\n    \"declaration\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"moduleResolution\": 2,\r\n    \"target\": \"ES2017\",\r\n    \"jsx\": \"React\",\r\n    \"module\": \"ESNext\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n</details>\r\n\r\n**Playground Link:** [Provided](https://www.typescriptlang.org/play?ts=4.1.0-beta#code/GYVwdgxgLglg9mABAcwKZlQJwIZVQCgHcALOALkQGcpMYxkBKCgbwCtKEKaRUAaRAEZwAJgE8WxVABsp5KjTrIAvksQAfRGw5gKwbFMp9BI8fNr1VzALAAoRPcSZUUEJiRbOibkaFiJ02QoSOBVbJVtbCARqTV9RfnYEVQBeFHQsXAIAckI4TClhLIYAbgibGGBEfESwBk1bB2MxRAB6FqpSEAKUGAA3VERROBBEbBAoOABaKIBbAAcpZyNgPMQAAwA6SRk4NbDEaUN6uwc41vbKTu6BAewzRX4oYhBKHt7FdboIKRBhVEo1qNXtgkKgAB7YeaLMJlIA)\r\n      ",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 1188951,
            "login": "MadaraUchiha"
        },
        "id": 750858676,
        "created_at": "2020-11-25T14:20:07Z",
        "title": "Const objects with symbol values should have type \"unique symbol\" but have \"symbol\" instead",
        "body": "<!-- 🚨 STOP 🚨 STOP 🚨 STOP 🚨\r\n\r\nHalf of all issues filed here are duplicates, answered in the FAQ, or not appropriate for the bug tracker. Even if you think you've found a *bug*, please read the FAQ first, especially the Common \"Bugs\" That Aren't Bugs section!\r\n\r\nPlease help us by doing the following steps before logging an issue:\r\n  * Search: https://github.com/Microsoft/TypeScript/search?type=Issues\r\n  * Read the FAQ: https://github.com/Microsoft/TypeScript/wiki/FAQ\r\n\r\nPlease fill in the *entire* template below.\r\n-->\r\n\r\n<!--\r\nPlease try to reproduce the issue with the latest published version. It may have already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n-->\r\n**TypeScript Version:**  4.1.2 (Playground)\r\n\r\n<!-- Search terms you tried before logging this (so others can find this issue more easily) -->\r\n**Search Terms:**\r\n- object const unique symbol\r\n\r\n**Code**\r\n\r\n```ts\r\nconst v1 = Symbol(); // typeof v1 is unique symbol (typeof v1)\r\nconst v2 = {s: Symbol()}; // typeof v2 is {s: symbol}\r\nconst v3 = {s: Symbol()} as const; // typeof v3 is {readonly s: symbol}, expected {readonly s: unique symbol}\r\n```\r\n\r\n**Expected behavior:**\r\nThe type of `v3` to be `{readonly s: unique symbol}` (or `{readonly s: typeof v3['s']}`)\r\n\r\n**Actual behavior:**\r\nThe type of `v3` is `{readonly s: symbol}`, making it assignable with other \"symboled\" objects\r\n\r\n**Playground Link:** https://www.typescriptlang.org/play?target=99#code/MYewdgzgLgBAbgRhgXhgZQJ4FsBGIA2AFAJQDcMA9BTFBgA4CmIAZvEgJYQwCuY7AjtwYwI2PPhiFajFm2IAoUJFhwATChgBvCAC50YgiQC+5KjXpNWamJy26RB-EcXho8AMwbtezLkPEjGABDLiVoU2ppSw8bLk0AJwYggBNwfAwRPVE-JwAaGAYAD0ZgKAZkrUSUtIz7XgEhBxyjIA\r\n\r\n**Related Issues:** N/A\r\n\r\n**Observations**\r\nThe reason I think this is a bug, is that I'd have expected symbols to behave like other primitives in the sense that `as const`, when used in objects/arrays, would use the literal value type, rather than the general primitive type.\r\n\r\nCompare to strings ([playground](https://www.typescriptlang.org/play?target=99&ssl=1&ssc=1&pln=3&pc=85#code/MYewdgzgLgBAbgFhgXhgcgBYFMA2ORoDcMA9CTFAJ4AOWIAZvEgJYQwBE2eI7AUKJFhwArChgBvCAC50XfGgC+xMhRp1GcAEwxWE6TGgAnZmADmC-uGjwAbGMkzMueQpgBDNgOjLyVWg3gAZh02cUMsNwATcBxKAxlOZx4FABp3NiwAD1pgKCxIoA)):\r\n\r\n```ts\r\nconst v4 = 'hello'; // typeof v4 is \"hello\"\r\nconst v5 = {s: 'hello'}; // typeof v2 is {s: string}\r\nconst v6 = {s: 'hello'} as const; // typeof v3 is {readonly s: \"hello\"}, as expected\r\n```\r\n\r\nor numbers ([playground](https://www.typescriptlang.org/play?target=99#code/MYewdgzgLgBAbgdhgXhgNgNwwPTZlATwAcBTEAM3gBYYBLCdAKFEljgA4UYBvCALnQBfLLnzEylOACY6DXgLABXALYAjEgCdBzcNHgBOLvKEwAhgxbQReQqQrwAzLJ4aSpgCbgANgRj8hADRmDCQAHqTAUCTuQA)):\r\n\r\n```ts\r\nconst v7 = 6; // typeof v4 is 6\r\nconst v8 = {s: 6}; // typeof v2 is {s: number}\r\nconst v9 = {s: 6} as const; // typeof v3 is {readonly s: 6}, as expected\r\n```",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    },
    {
        "user": {
            "id": 8855122,
            "login": "irakliy81"
        },
        "id": 64649401,
        "created_at": "2015-03-26T22:38:52Z",
        "title": "Suggestion: allow get/set accessors to be of different types",
        "body": "It would be great if there was a way to relax the current constraint of requiring get/set accessors to have the same type. this would be helpful in a situation like this:\n\n```\nclass MyClass {\n\n    private _myDate: moment.Moment;\n\n    get myDate(): moment.Moment {\n        return this._myDate;\n    }\n\n    set myDate(value: Date | moment.Moment) {\n        this._myDate = moment(value);\n    }\n}\n```\n\nCurrently, this does not seems to be possible, and I have to resort to something like this:\n\n```\nclass MyClass {\n\n    private _myDate: moment.Moment;\n\n    get myDate(): moment.Moment {\n        return this._myDate;\n    }\n\n    set myDate(value: moment.Moment) {\n        assert.fail('Setter for myDate is not available. Please use: setMyDate() instead');\n    }\n\n    setMyDate(value: Date | moment.Moment) {\n        this._myDate = moment(value);\n    }\n}\n```\n\nThis is far from ideal, and the code would be much cleaner if different types would be allowed.\n\nThanks!\n",
        "comments": [
            {
                "id": 48975598,
                "created_at": "2014-07-15T00:03:31Z",
                "body": ":thumbsup: :trophy: :cactus: :dart: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 48980092,
                "created_at": "2014-07-15T01:16:29Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 6685088,
                    "login": "RyanCavanaugh"
                }
            },
            {
                "id": 49060865,
                "created_at": "2014-07-15T16:53:06Z",
                "body": "LGTM\n",
                "user": {
                    "id": 8000722,
                    "login": "mhegazy"
                }
            },
            {
                "id": 49065636,
                "created_at": "2014-07-15T17:30:40Z",
                "body": "So in the first example, we might emit it like the following:\n\nx && x.y && x.y.z && x.y.z.foo\n\nBut then we'd have to somehow make x, y, z, and foo each evaluate at most once.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49086239,
                "created_at": "2014-07-15T20:15:28Z",
                "body": "You also really can't do `&&` in many cases because truthiness becomes a bit of a problem for primitives.\n\nFor example:\n\n```\n\"     \"?.trim()?.indexOf(\"hello\")\n```\n\ngives `\"\"`.\n\nSo you need to do some explicit comparisons to `null` using `==` for the general case, unless we leverage the type system (which would be fairly cool to see us do).\n\nWe could possibly emit a monadic-bind function (not pretty for the JS output), or use some transformation on ternary operators (closer to typical JS equivalent). I'm clearly a little biased towards the latter.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49127398,
                "created_at": "2014-07-16T06:15:07Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49128640,
                "created_at": "2014-07-16T06:34:40Z",
                "body": "What are the perf implications of this? Does it not really matter since nodes have their own TypeChecked flag?\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49133231,
                "created_at": "2014-07-16T07:40:27Z",
                "body": "I feel like there are two major changes going on here.  The first is related to exports, and hte second it the enum change.  The enum change looks fine to me.  The export change i'm not so clear on.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49194753,
                "created_at": "2014-07-16T16:54:33Z",
                "body": "Yeah this pull request is for the enum change. I had another pull request (PR) #23 for the other part, but couldn't figure out how to exclude it from this PR. So I consider you signed off on this PR.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49213028,
                "created_at": "2014-07-16T19:16:04Z",
                "body": ":+1: \n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49223339,
                "created_at": "2014-07-16T20:38:12Z",
                "body": "LGTM\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49233125,
                "created_at": "2014-07-16T21:56:04Z",
                "body": ":thumbsup: \n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49233512,
                "created_at": "2014-07-16T21:59:35Z",
                "body": "Make sure to check if the next token is either an arrow or open brace. The open brace corresponds to a function expression where the user forgot the arrow.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49241145,
                "created_at": "2014-07-16T23:25:12Z",
                "body": "So, 'files changed' isn't showing my anything.  Do you know what's up with that?\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49241426,
                "created_at": "2014-07-16T23:28:50Z",
                "body": "LGTM.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49242472,
                "created_at": "2014-07-16T23:43:26Z",
                "body": "Signed off\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49246796,
                "created_at": "2014-07-17T00:49:55Z",
                "body": "LGTM.  Nice comments.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248173,
                "created_at": "2014-07-17T01:12:49Z",
                "body": "Based on the look of things (~4000 changes) I suspect the diff is too large to display in the browser. \n\nhttp://stackoverflow.com/questions/9702795/large-github-commit-diff-not-shown\n\n*Official support answer as of Feb 19th / 2013 via Brian Levin @github.\n\nWe have some limits on diffs that we show in the browser in order to keep the pull request and compare pages working. Currently, we cut them off at 300 files, a total diff of 1MB, and an individual diff of 100KB.\n\nIf your diffs exceed the limits and can't be viewed online, you can always pull the changes locally and view the diff there. It may not be as convenient for you, but it'll get the job done.*\n\nFor comparison, Codeplex didn't have a limit, it just choked and died if your diff was too large.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49248644,
                "created_at": "2014-07-17T01:21:18Z",
                "body": "Unfortunatley, GitForWindows also thinks this is too large. :(\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49248954,
                "created_at": "2014-07-17T01:26:45Z",
                "body": "Yeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49251008,
                "created_at": "2014-07-17T02:05:42Z",
                "body": "If you want a plaintext view of the diff (not likely...): https://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e.diff\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49253097,
                "created_at": "2014-07-17T02:50:19Z",
                "body": "Yup.  The problem here appears to be with github and their stock tools.  Sheetal did something very normal, she wrapped some code in a function.  However, because the github tools are sensitive to whitespace they view it as every line being changed significantly (when really they were either indented or dedented).  Looking in gitk and turning on ‘ignore whitespace changes’ makes the change reviewable.  Unfortunately, I can’t find a similar option on github.\n\n```\n           -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 6:27 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nYeah I noticed the same thing. I'm looking at it in gitk now after checking out the branch. Need to figure out a strategy here, although hopefully commits of this size don't occur too often. It looks like nearly every line of a 2300 line file are touched.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49248954.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49253890,
                "created_at": "2014-07-17T03:07:47Z",
                "body": "Ah, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n",
                "user": {
                    "id": 7121557,
                    "login": "danquirk"
                }
            },
            {
                "id": 49271183,
                "created_at": "2014-07-17T08:13:54Z",
                "body": "Nice.  How did you get it to do that?\n\n```\n      -- Cyrus\n```\n\nFrom: Dan Quirk [mailto:notifications@github.com]\nSent: Wednesday, July 16, 2014 8:08 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data (#35)\n\nAh, yeah. Try this then:\n\nhttps://github.com/Microsoft/TypeScript/commit/d9196d66b622a086af59e77f5663c45820b2dc5e?w=1\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/35#issuecomment-49253890.\n",
                "user": {
                    "id": 4564579,
                    "login": "CyrusNajmabadi"
                }
            },
            {
                "id": 49338619,
                "created_at": "2014-07-17T17:34:36Z",
                "body": "Looks great!\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49339872,
                "created_at": "2014-07-17T17:45:52Z",
                "body": "I definitely like that we can reason about the local and exported symbols as a single entity, but I think it would be good to go over the logic behind this change on the whiteboard before we accept it. I just want to make sure we've covered everything.\n",
                "user": {
                    "id": 4226954,
                    "login": "ahejlsberg"
                }
            },
            {
                "id": 49342543,
                "created_at": "2014-07-17T18:07:01Z",
                "body": "Thanks guys!\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49348925,
                "created_at": "2014-07-17T18:57:53Z",
                "body": "Add `?w=1` to the URL.\n\nAlso, that's the commit view, not the pull request view.\n",
                "user": {
                    "id": 972891,
                    "login": "DanielRosenwasser"
                }
            },
            {
                "id": 49360621,
                "created_at": "2014-07-17T20:25:25Z",
                "body": "The actual behavior here matches the spec. It appears to be by design.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            },
            {
                "id": 49361599,
                "created_at": "2014-07-17T20:33:07Z",
                "body": "Another interesting example where we don't error, but probably should:\n\nvar v: { [s: string]: string} = {\n     p: 3, // Expect an error here\n     q: <any>null\n}\n\nThis is a result of best common type losing information, and the nontransitivity of assignability.\n",
                "user": {
                    "id": 8052525,
                    "login": "JsonFreeman"
                }
            }
        ]
    }
]
